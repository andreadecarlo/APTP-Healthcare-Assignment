(define (domain healthcare)

(:requirements :strips :typing :hierarchy)

(:types
    location - object
	unit    - locatable
	content - locatable
	box     - locatable
	patient - locatable
	robot-box       - robot
	robot-patient   - robot
	robot           - locatable
	carrier         - locatable
	capacity_number - object
)

(:constants 
	central_warehouse - location
	entrance - location
	scalpel tongue_depressor aspirin bandage thermometer - content
)

(:predicates
    (at ?x - locatable ?l - location)		; x is at location
	(at-unit ?p - patient ?u - unit) 		; patient is at unit
    (connected ?l1 - location ?l2 - location) ; locations are connected

	(full ?b - box)
    (filled-with ?b - box ?c - content) 		; box is filled with content 
    (rob-carrier ?r - robot-box ?cr - carrier)          ; robot has a carrier
    (loaded ?cr - carrier ?b - box)          ; carrier is carrying a box
    (capacity ?cr - carrier ?n - capacity_number)
	(capacity_predecessor ?arg0 - capacity_number ?arg1 - capacity_number)
	(ready-for-unit ?c - content ?u - unit)
	(unit-ready ?u - unit)		; unit is ready for deliver		MODIFY with "intended-for"
	(unit-satisfied ?u - unit)

	(unit-has-box ?u - unit ?b - box)           ; unit has a box
    (unit-has-content ?u - unit ?c - content)   ; unit has specific content
	(unit-wants ?u - unit ?c - content)

    (with-patient ?r - robot ?p - patient)  ; robot is with a patient
	(busy ?r - robot-patient)              	; robot is busy with a patient

)

(:task deliver_all
	:parameters ()
	:precondition ()
	:effect ()
)

(:task load_all
	:parameters (?r - robot-box ?cr - carrier)
    :precondition (rob-carrier ?r ?cr)
    :effect ()
)

(:task supply_all
	:parameters (?r - robot-box ?cr - carrier)
    :precondition (rob-carrier ?r ?cr)
    :effect ()
)

(:task get_to
    :parameters (?r - robot ?l - location)    
    :precondition ()
    :effect ()
)

(:task load
	:parameters (?r - robot-box ?cr - carrier ?c - content)
	:precondition ()
	:effect ()
)

(:task supply
	:parameters (?r - robot-box ?cr - carrier ?c - content ?b - box ?u - unit ?l - location)
	:precondition (and
		(unit-wants ?u ?c)
		(filled-with ?b ?c)
		(loaded ?cr ?b)
	)
	:effect ()
)

(:task make-unit-ready
	:parameters (?u - unit)
	:precondition ()
	:effect (
		unit-satisfied ?u
	)
)

(:task make-unit-satisfied
	:parameters (?u - unit)
	:precondition ()
	:effect ()
)

(:method m_deliver_none
	:parameters ()
	:task (deliver_all)
	:precondition (
		; all units ready
		; not (exists (?u - unit ?c - content) (unit-wants ?u ?c))
		not (exists (?u - unit) (not (unit-satisfied ?u)))		;TO TEST
	)
	:subtasks ()
)

(:method m_deliver_all
	:parameters (?r - robot-box ?cr - carrier)
	:task (deliver_all)
	:precondition (and
		(rob-carrier ?r ?cr)
	)
	:subtasks (and
		(task0 (load_all ?r ?cr))
		(task1 (supply_all ?r ?cr))
		(task2 (deliver_all))
	)
	:ordering (and
		(task0 < task1)
		(task1 < task2)
	)
)

(:method m_load_none_all_ready
	:parameters (?r - robot-box ?cr - carrier ?s1 - capacity_number)
	:task (load_all ?r ?cr)
	:precondition (
		;all content is ready for delivery
		not (exists (?u - unit) (and (exists (?c - content)(unit-wants ?u ?c))(not(unit-ready ?u))))
	)
	:subtasks ()
)

(:method m_load_none_carrier_full
	:parameters (?r - robot-box ?cr - carrier ?s1 - capacity_number)
	:task (load_all ?r ?cr)
	:precondition (and
		(capacity ?cr ?s1)
		(not (exists (?s0 - capacity_number) (capacity_predecessor ?s0 ?s1)))
	)
	:subtasks ()
)

(:method m_load_all
	:parameters (?r - robot-box ?cr - carrier ?c - content ?u - unit)
	:task (load_all ?r ?cr)
	:precondition (and
		(unit-wants ?u ?c)
		(not (ready-for-unit ?c ?u))
	)
	:subtasks (and
		(task0 (get_to ?r central_warehouse))
		(task1 (load ?r ?cr ?c))
		(task2 (make-ready-for-unit ?c ?u))
		(task3 (make-unit-ready ?u))	; when unit wants content but are all ready for deliver	
		(task4 (load_all))
	)
	:ordering (and
		(task0 < task1)
		(task1 < task2)
		(task2 < task3)
		(task3 < task4)
	)
)

(:method m_load
	:parameters (?r - robot-box ?cr - carrier ?c - content ?b - box ?s1 - capacity_number ?s2 - capacity_number)
	:task (load ?r ?cr ?c)
	:precondition ()
	:subtasks (and
		(task0 (fill ?r ?b ?c central_warehouse))
		(task1 (pick-up ?r ?b central_warehouse ?cr ?s1 ?s2))
	)
	:ordering (and
		(task0 < task1)
	)
)

(:method m_not_make_unit_ready
	:parameters (?u - unit)
	:task (make-unit-ready ?u)
	:precondition (
		exists (?c - content) 
			(and 
				(unit-wants ?u ?c) 
				(not (ready-for-unit ?c ?u))
			)
	)
	:subtasks ()
)

(:method m_make_unit_ready
	:parameters (?u - unit)
	:task (make-unit-ready ?u)
	:precondition (
		not (exists (?c - content) 
			(and 
				(unit-wants ?u ?c) 
				(not (ready-for-unit ?c ?u))
			)
		)
	)
	:subtasks (
		task0 (make-unit-ready_aux ?u)
	)
)


(:method m_i_am_there
	:parameters (?r - robot ?dest - location)
	:task (get_to ?r ?dest)
	:precondition (at ?r ?dest)
	:subtasks ()
)

(:method m_get_to
    :parameters (?r - robot ?origin - location ?dest - location)
    :task (get_to ?r ?dest)
    :subtasks (
        move ?r ?origin ?dest
    )
)

(:method m_get_to_via
	:parameters (?r - robot ?middle - location ?dest - location)
	:task (get_to ?r ?dest)
	:subtasks (and
		(task0 (get_to ?r ?middle))
		(task1 (move ?r ?middle ?dest))
	)
	:ordering (task0 < task1)
)

(:method m_supply_none_carrier_empty
	:parameters (?r - robot-box ?cr - carrier ?s1 - capacity_number)
	:task (supply_all ?r ?cr)
	:precondition (and
		;carrier is empty 	(max capacity of the problem, every carrier has same capacity) otherwise we need to model it
		(capacity ?cr ?s1)
		(not (exists (?s2 - capacity_number) (capacity_predecessor ?s1 ?s2)))
	)
	:subtasks ()
)

(:method m_supply_all
	:parameters (?r - robot-box ?cr - carrier ?c - content ?b - box ?u - unit ?l - location)
	:task (supply_all ?r ?cr)
	:precondition (and
		; ; (unit-wants ?u ?c)
		(ready-for-unit ?c ?u)
		(filled-with ?b ?c)
		(loaded ?cr ?b)

		(at ?u ?l)
	)
	:subtasks (and
		(task0 (get_to ?r ?l))				;ok
		(task1 (supply ?r ?cr ?c ?b ?u ?l))	
		(task2 (make-unit-satisfied ?u))
		(task3 (supply_all ?r ?cr))
	)
	:ordering (and
		(task0 < task1)
		(task1 < task2)
		(task2 < task3)
	)
)

(:method m_supply
	:parameters (?r - robot-box ?cr - carrier ?c - content ?b - box ?u - unit ?l - location ?s1 - capacity_number ?s2 - capacity_number)
	:task (supply ?r ?cr ?c ?b ?u ?l)
	:precondition (and
		(capacity_predecessor ?s1 ?s2)
		(capacity ?cr ?s1)
	)
	:subtasks (and
		(task1 (drop ?r ?b ?l ?u ?cr ?s1 ?s2))
		(task2 (empty ?r ?b ?c ?u ?l))
	)
	:ordering (task1 < task2)
)

(:method m_not_make_unit_satisfied
	:parameters (?u - unit)
	:task (make-unit-satisfied ?u)
	:precondition (
		exists (?c - content)(unit-wants ?u ?c) 
	)
	:subtasks ()
)

(:method m_make_unit_satisfied
	:parameters (?u - unit)
	:task (make-unit-satisfied ?u)
	:precondition (
		not (exists (?c - content)(unit-wants ?u ?c))
	)
	:subtasks (
		task0 (make-unit-satisfied_aux ?u)
	)
)

(:action make-unit-ready_aux
	:parameters (?u - unit)
	:precondition ()
	:effect (unit-ready ?u)
)

(:action make-ready-for-unit
	:parameters (?c - content ?u - unit)
	:precondition ()
	:effect (ready-for-unit ?c ?u)
)

(:action fill
	:parameters (?r - robot-box ?b - box ?c - content ?l - location)
	:precondition (and 
		(at ?b ?l)
		(at ?r ?l)
		(at ?c ?l)
		(not (full ?b))
	)
	:effect (and 
		(filled-with ?b ?c)
		(full ?b)
	)
)

(:action pick-up
	:parameters (?r - robot-box ?b - box ?l - location ?cr - carrier ?s1 - capacity_number ?s2 - capacity_number)
	:precondition (and 
		(at ?b ?l)
		(at ?r ?l)

		(rob-carrier ?r ?cr)
		(capacity_predecessor ?s1 ?s2)
		(capacity ?cr ?s2)
	)
	:effect (and 
		(loaded ?cr ?b)
		(not (at ?b ?l))

		(capacity ?cr ?s1)
		(not (capacity ?cr ?s2))
	)
)

(:action move
	:parameters (?r - robot ?from - location ?to - location)
	:precondition (and 
		(at ?r ?from)
		(or (connected ?from ?to) (connected ?to ?from))
	)
	:effect (and 
		(at ?r ?to)
		(not (at ?r ?from))
	)
)

(:action drop
	:parameters (?r - robot-box ?b - box ?l - location ?u - unit ?cr - carrier ?s1 - capacity_number ?s2 - capacity_number)
	:precondition (and
		(at ?r ?l)
		(at ?u ?l)
		(loaded ?cr ?b)
		(capacity ?cr ?s1)
		(capacity_predecessor ?s1 ?s2)
	)
	:effect (and 
		(unit-has-box ?u ?b)
		(at ?b ?l)

		(not (loaded ?cr ?b))
		(capacity ?cr ?s2)
		(not (capacity ?cr ?s1))
	)
)

(:action empty
	:parameters (?r - robot-box ?b - box ?c - content ?u - unit ?l - location)
	:precondition (and 
		(at ?u ?l)
		(at ?b ?l)
		(at ?r ?l)
		(unit-has-box ?u ?b)
	)
	:effect (and 
		(unit-has-content ?u ?c)
		(not (filled-with ?b ?c))
		(not (full ?b))
		(at ?c ?l)

		(not (unit-wants ?u ?c))		; ADDED
		(not (ready-for-unit ?c ?u))	; ADDED
	)
)

(:action make-unit-satisfied_aux
	:parameters (?u - unit)
	:precondition ()
	:effect (unit-satisfied ?u)
)


)

