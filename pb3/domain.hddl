(define (domain healthcare)

(:requirements :strips :typing :hierarchy)

(:types
    location
	unit    - locatable
	content - locatable
	box     - locatable
	patient - locatable
	robot-box       - robot
	robot-patient   - robot
	robot           - locatable
	carrier         - locatable
	capacity_number - object
)

(:constants 
	central_warehouse - location
	entrance - location
	scalpel tongue_depressor aspirin bandage thermometer - content
)

(:predicates
    (at ?x - locatable ?l - location)		; x is at location
	(at-unit ?p - patient ?u - unit) 		; patient is at unit

    (connected ?l1 - location ?l2 - location) ; locations are connected

    (filled-with ?b - box ?c - content) 		; box is filled with content 
	(empty-box ?b - box)               			; box is empty

    (unit-has-content ?u - unit ?c - content)   ; unit has specific content
	(unit-has-box ?u - unit ?b - box)           ; unit has a box

    (rob-carrier ?r - robot-box ?c - carrier)          ; robot has a carrier
    (loaded ?c - carrier ?b - box)              ; carrier is carrying a box

    (capacity ?c - carrier ?n - capacity_number)
	(capacity_predecessor ?arg0 - capacity_number ?arg1 - capacity_number)

    (with-patient ?r - robot ?p - patient)     ; robot is with a patient
	(busy ?r - robot-patient)                  ; robot is busy with a patient
)

(:task deliver
    :parameters (?c - content ?u - unit)
    :precondition ()
    :effect ()
)

(:task get_to
    :parameters (?r - robot ?l - location)    
    :precondition ()
    :effect ()
)

(:task load
	:parameters (?r - robot-box ?c - content)
	:precondition ()
	:effect ()
)

(:task supply
	:parameters (?r - robot-box ?c - content ?u - unit)
	:precondition ()
	:effect ()
)

(:task accompany
	:parameters (?p - patient ?u - unit)
	:precondition ()
	:effect ()
)

(:method m_deliver
    :parameters (?r - robot-box ?dest - location ?c - content ?u - unit)
    :task (deliver ?c ?u)
    :precondition (and
        (at ?u ?dest)
        (not (unit-has-content ?u ?c))
    )
    :subtasks (and
        (task0 (get_to ?r central_warehouse))
        (task1 (load ?r ?c))
        (task2 (get_to ?r ?dest))
        (task3 (supply ?r ?c ?u))
    )
)

(:method m_get_to_carrier
    :parameters (?r - robot-box ?cr - carrier ?origin - location ?dest - location)
    :task (get_to ?r ?dest)
    :subtasks (and
        (task0 (move-carrier ?r ?cr ?origin ?dest))
    )
)

(:method m_get_to_patient
    :parameters (?r - robot-patient ?origin - location ?dest - location)
    :task (get_to ?r ?dest)
    :subtasks (and
        (task0 (move-robot ?r ?origin ?dest))
    )
)

(:method m_get_to_via
	:parameters (?r - robot-box ?cr - carrier ?origin - location ?middle - location ?dest - location)
	:task (get_to ?r ?dest)
	:subtasks (and
		(task0 (get_to ?r ?middle))
		(task1 (move-carrier ?r ?cr ?middle ?dest))
	)
)

(:method m_get_to_via_patient
	:parameters (?r - robot-patient ?origin - location ?middle - location ?dest - location)
	:task (get_to ?r ?dest)
	:subtasks (and
		(task0 (get_to ?r ?middle))
		(task1 (move-robot ?r ?middle ?dest))
	)
)

(:method m_i_am_there
	:parameters (?r - robot ?dest - location)
	:task (get_to ?r ?dest)
	:precondition (at ?r ?dest)
	:subtasks ()
)

(:method m_load
	:parameters (?r - robot-box ?c - content ?b - box ?l - location ?cr - carrier ?s1 - capacity_number ?s2 - capacity_number)
	:task (load ?r ?c)
	:subtasks (and
		(task0 (fill ?r ?b ?c ?l))
		(task1 (pick-up ?r ?b ?l ?cr ?s1 ?s2))
	)
)

(:method m_supply
	:parameters (?r - robot-box ?b - box ?c -content ?l - location ?u - unit ?cr - carrier ?s1 - capacity_number ?s2 - capacity_number)
	:task (supply ?r ?c ?u)
	:subtasks (and
		(task0(drop ?r ?b ?l ?u ?cr ?s1 ?s2))
		(task1(empty ?r ?b ?c ?u ?l))
	)
)

(:method m_accompany
	:parameters (?r - robot-patient ?p - patient ?origin - location ?dest - location ?u - unit)
	:task (accompany ?p ?u)
	:subtasks (and
		(task0 (get_to ?r ?origin))
		(task1 (take-patient ?r ?p ?origin))
		(task2 (get_to ?r ?dest))
		(task3 (release-patient ?r ?p ?dest ?u))
	)
)

(:action move-carrier
	:parameters (?r - robot ?c - carrier ?from - location ?to - location)
	:precondition (and 
		(at ?r ?from)
		(rob-carrier ?r ?c)
		(or (connected ?from ?to) (connected ?to ?from))
	)
	:effect (and 
		(at ?r ?to)
		(at ?c ?to)
		(not (at ?r ?from))
		(not (at ?c ?from))
	)
)

(:action move-robot
    :parameters (?r - robot-patient ?from - location ?to - location)
    :precondition (and
        (at ?r ?from)
        (or (connected ?from ?to) (connected ?to ?from))
    )
    :effect (and
        (at ?r ?to)
        (not (at ?r ?from))
    )
)

(:action fill
	:parameters (?r - robot-box ?b - box ?c - content ?l - location)
	:precondition (and 
		(at ?b ?l)
		(at ?r ?l)
		(at ?c ?l)
		(empty-box ?b)
	)
	:effect (and 
		(filled-with ?b ?c)
		(not (empty-box ?b))
	)
)

(:action pick-up
	:parameters (?r - robot-box ?b - box ?l - location ?c - carrier ?s1 - capacity_number ?s2 - capacity_number)
	:precondition (and 
		(at ?b ?l)
		(at ?r ?l)
		(at ?c ?l)
		(rob-carrier ?r ?c)
		(capacity_predecessor ?s1 ?s2)
		(capacity ?c ?s2)
	)
	:effect (and 
		(loaded ?c ?b)
		(not (at ?b ?l))
		(capacity ?c ?s1)
		(not (capacity ?c ?s2))
	)
)

(:action drop
		:parameters (?r - robot-box ?b - box ?l - location ?u - unit ?c - carrier ?s1 - capacity_number ?s2 - capacity_number)
		:precondition (and
			(at ?r ?l)
			(at ?u ?l)
			(at ?c ?l)
			(rob-carrier ?r ?c)
			(loaded ?c ?b)
			(capacity_predecessor ?s1 ?s2)
			(capacity ?c ?s1)
		)
		:effect (and 
			(unit-has-box ?u ?b)
			(at ?b ?l)
			(not (loaded ?c ?b))
			(capacity ?c ?s2)
			(not (capacity ?c ?s1))
		)
)

(:action empty
	:parameters (?r - robot-box ?b - box ?c - content ?u - unit ?l - location)
	:precondition (and 
		(at ?u ?l)
		(at ?b ?l)
		(at ?r ?l)
		(unit-has-box ?u ?b)
		(filled-with ?b ?c)
		(not (empty-box ?b))
		(not (unit-has-content ?u ?c))
	)
	:effect (and 
		(unit-has-content ?u ?c)
		(not (filled-with ?b ?c))
		(empty-box ?b)
		(at ?c ?l)
	)
)

(:action take-patient
	:parameters (?r - robot-patient ?p - patient ?l - location)
	:precondition (and 
		(at ?r ?l)
		(at ?p ?l)
		(not (busy ?r))
	)
	:effect (and 
		(with-patient ?r ?p)
		(busy ?r)
	)
)

(:action release-patient
	:parameters (?r - robot-patient ?p - patient ?l - location ?u - unit)
	:precondition (and 
		(at ?r ?l)
		(at ?u ?l)
		(with-patient ?r ?p)
		(busy ?r)
	)

	:effect (and 
		(not (with-patient ?r ?p))
		(not (busy ?r))
		(at-unit ?p ?u)
	)
)

)

