(define (domain healthcare)

(:requirements :strips :typing :hierarchy)

(:types
    location
	unit    - locatable
	content - locatable
	box     - locatable
	patient - locatable
	robot-box       - robot
	robot-patient   - robot
	robot           - locatable
	carrier         - locatable
	capacity_number - object
)

(:constants 
	central_warehouse - location
	entrance - location
	scalpel tongue_depressor aspirin bandage thermometer - content
)

(:predicates
    (at ?x - locatable ?l - location)		; x is at location
	(at-unit ?p - patient ?u - unit) 		; patient is at unit

    (connected ?l1 - location ?l2 - location) ; locations are connected

    (filled-with ?b - box ?c - content) 		; box is filled with content 
	(empty-box ?b - box)               			; box is empty

    (unit-has-content ?u - unit ?c - content)   ; unit has specific content
	(unit-has-box ?u - unit ?b - box)           ; unit has a box

    (rob-carrier ?r - robot-box ?c - carrier)          ; robot has a carrier
    (loaded ?c - carrier ?b - box)              ; carrier is carrying a box

    (capacity ?c - carrier ?n - capacity_number)
	(capacity_predecessor ?arg0 - capacity_number ?arg1 - capacity_number)

    (with-patient ?r - robot ?p - patient)     ; robot is with a patient
	(busy ?r - robot-patient)                  ; robot is busy with a patient
)

(:task deliver
    :parameters (?c - content ?u - unit)
    :precondition ()
    :effect ()
)

(:task get_to
    :parameters (?r - robot ?l - location)    
    :precondition ()
    :effect ()
)

; (:method m_deliver
;     :parameters (?r - robot-box ?dest - location ?c - content ?u - unit)
;     :task (deliver ?c ?u)
;     :subtasks (and
;         (task0 (get_to ?r central_warehouse))
;         (task1 (load ?r ?c))
;         (task2 (get_to ?r ?dest))
;         (task3 (supply ?r ?c ?u))
;     )
; )

(:method m_get_to
    :parameters (?r - robot ?origin - location ?dest - location)
    :task (get_to ?r ?dest)
    :subtasks (and
        (task0 (move ?r ?origin ?dest))
    )
)

(:action move
	:parameters (?r - robot ?from - location ?to - location)
	:precondition (and 
		(at ?r ?from)
		(or (connected ?from ?to) (connected ?to ?from))
		; (not (= ?to central_warehouse))
	)
	:effect (and 
		(at ?r ?to)
		(not (at ?r ?from))

		(forall (?c - carrier) 
			(when (rob-carrier ?r ?c) 
				(and (at ?c ?to)
					(not (at ?c ?from))
				)
			)
		)

		(forall (?b - box) 
			(when (loaded ?r ?b) 
				(and (at ?b ?to)
					(not (at ?b ?from))
  				)
			)
		)

		(forall (?p - patient) 
			(when (with-patient ?r ?p) 
				(and (at ?p ?to)
					(not (at ?p ?from))
				)
			)
		)
	)
)
)