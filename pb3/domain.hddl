(define (domain healthcare)

(:requirements :strips :typing :hierarchy)

(:types
    location - object
	unit    - locatable
	content - locatable
	box     - locatable
	patient - locatable
	robot-box       - robot
	robot-patient   - robot
	robot           - locatable
	carrier         - locatable
	capacity_number - object
)

(:constants 
	central_warehouse - location
	entrance - location
	scalpel tongue_depressor aspirin bandage thermometer - content
)

(:predicates
    (at ?x - locatable ?l - location)		; x is at location
	(at-unit ?p - patient ?u - unit) 		; patient is at unit
    (connected ?l1 - location ?l2 - location) ; locations are connected

	(empty-box ?b - box)               			; box is empty
    (filled-with ?b - box ?c - content) 		; box is filled with content 
    (rob-carrier ?r - robot-box ?cr - carrier)          ; robot has a carrier
    (loaded ?cr - carrier ?b - box)          ; carrier is carrying a box
    (capacity ?cr - carrier ?n - capacity_number)
	(capacity_predecessor ?arg0 - capacity_number ?arg1 - capacity_number)
	(ready-for-unit ?c - content ?u - unit)	;?cr - carrier ;content is ready for delivery to unit

	(unit-has-box ?u - unit ?b - box)           ; unit has a box
    (unit-has-content ?u - unit ?c - content)   ; unit has specific content
	(unit-wants ?u - unit ?c - content)
	(unit-satisfied ?u - unit)

    (with-patient ?r - robot ?p - patient)  ; robot is with a patient
	(busy ?r - robot-patient)              	; robot is busy with a patient

)

;  (:derived (on_carrier ?c - content ?cr - carrier)
;     (exists (?b - box)
; 		(and
; 			(loaded ?cr ?b)
; 			(filled-with ?b ?c)
; 		)
; 	)
; )


(:task deliver_all
    :parameters ()
    :precondition ()
    :effect ()
)

(:task load_all
	:parameters ()
    :precondition ()
    :effect ()
)

(:task supply_all
	:parameters ()
	:precondition ()
	:effect ()
)

(:task get_to
    :parameters (?r - robot ?l - location)    
    :precondition ()
    :effect ()
)

(:task load
	:parameters (?r - robot-box ?c - content)
	:precondition ()
	:effect ()
)

(:task supply
	:parameters (?r - robot-box ?c - content ?u - unit)
	:precondition ()
	:effect ()
)

(:task accompany
	:parameters (?p - patient ?u - unit)
	:precondition ()
	:effect ()
)

(:task unit-satisfied
	:parameters (?u - unit)
	:precondition ()
	:effect ()
)

(:method m_deliver_none
	:parameters ()
	:task (deliver_all)
	:precondition (not (exists (?u - unit ?c - content) (unit-wants ?u ?c)))
	:subtasks ()
)

(:method m_deliver_all
	:parameters ()
	:task (deliver_all)
	:precondition (exists (?u - unit ?c - content) (unit-wants ?u ?c))
	:subtasks (and
		(task0 (load_all))
		(task1 (supply_all))
		(task2 (deliver_all))		; in case capacity is not sufficient for one ride
	)
)

(:method m_load_none
	:parameters ()
	:task (load_all)
	:precondition (
		; carrier is full
		; (and (capacity ?cr ?cap) (not (exists (?c0 - capacity_number) (capacity_predecessor ?c0 ?cap))))
		; or
		; every content wanted is ready for delivery
		;(forall (?u - unit) (not (exists ?c content (and (unit-wants ?u ?c) (not (ready-for-unit ?c ?u))))))
		; (not (exists (?u - unit ?c - content) (and (unit-wants ?u ?c) (not (ready-for-unit ?c ?u)))))
		; or
		; every unit is satisfied
		not (exists (?u - unit ?c - content) (and (unit-wants ?u ?c) (not (ready-for-unit ?c ?u))))
	)
	:subtasks ()
)

(:method m_load_all
	:parameters (?r - robot-box ?c - content ?u - unit)
	:task (load_all)
	:precondition (and
		(unit-wants ?u ?c)
		(not (ready-for-unit ?c ?u))
	)
	:subtasks (and
		; (task0 (get_to ?r central_warehouse))
		(task0 (load ?r ?c))
		(task1 (unit-satisfied ?u))
		(task2 (load_all))
	)

	:ordering (and
		(task0 < task1)
		(task1 < task2)
	)
)

(:method m_unit_satisfied
	:parameters (?u - unit)
	:task (unit-satisfied ?u)
	:precondition (and
		(not (unit-satisfied ?u))
		(forall (?c - content) (not (unit-wants ?u ?c)))
	)
	:subtasks (and
		(task0 (make-unit-satisfied ?u))
	)
)

(:method m_unit_not_satisfied
	:parameters (?u - unit)
	:task (unit-satisfied ?u)
	:precondition (and
		(not (unit-satisfied ?u))
		(exists (?c - content) (unit-wants ?u ?c))
	)
	:subtasks ()
)


; (:method load_one
; 	:parameters (?r - robot-box ?cr - carrier ?cap - capacity_number ?c - content ?u - unit)
; 	:task (load ?r ?c)
; 	:precondition (and
; 		(exists (?arg0 - capacity_number ?arg1 - capacity_number) (and (capacity_predecessor ?arg0 ?cap) (capacity_predecessor ?arg1 ?arg0)))
; 	)
; 	:subtasks (and
; 		(task0 (load ?r ?c))
; 	)
; )

(:method m_get_to_central_warehouse_and_load
	:parameters (?r - robot ?c - content)
	:task (load ?r ?c)
	:precondition (not (at ?r central_warehouse))
	:subtasks (and
		(task0 (get_to ?r central_warehouse))
		(task1 (load ?r ?c))
	)
	:ordering (and
		(task0 < task1)
	)
)

(:method m_load
	:parameters (?r - robot-box ?c - content ?b - box ?l - location ?cr - carrier ?s1 - capacity_number ?s2 - capacity_number ?u - unit)
	:task (load ?r ?c)
	:precondition (and
		(at ?r central_warehouse)
	)
	:subtasks (and
		(task0 (fill ?r ?b ?c ?l))
		(task1 (pick-up ?r ?b ?l ?cr ?s1 ?s2))
		(task2 (make-ready-for-unit ?c ?u))
		(task3 (not_unit_wants ?u ?c))
	)
	:ordering (and
		(task0 < task1)
		(task1 < task2)
		(task2 < task3)
	)
)

(:method m_supply_none
	:parameters ()
	:task (supply_all)
	:precondition ()
	:subtasks ()
)

(:method m_supply
	:parameters (?r - robot-box ?b - box ?c - content ?l - location ?u - unit ?cr - carrier ?s1 - capacity_number ?s2 - capacity_number)
	:task (supply ?r ?c ?u)
	:subtasks (and
		(task0 (drop ?r ?b ?l ?u ?cr ?s1 ?s2))
		(task1 (empty ?r ?b ?c ?u ?l))
	)
)

(:method m_supply_more
	:parameters (?r - robot-box ?b - box ?c1 - content ?c2 - content ?l - location ?u1 - unit ?u2 - unit ?cr - carrier ?s1 - capacity_number ?s2 - capacity_number)
	:task (supply ?r ?c1 ?u1)
	:precondition (and
		(at ?u1 ?l)
		(at ?u2 ?l)
	)
	:subtasks (and
		(task0 (drop ?r ?b ?l ?u1 ?cr ?s1 ?s2))
		(task1 (empty ?r ?b ?c1 ?u1 ?l))
		(task2 (supply ?r ?c2 ?u2))
	)
)

(:method m_supply_different_locations
	:parameters (?r - robot-box ?c1 - content ?c2 - content ?u1 - unit ?u2 - unit ?l1 - location ?l2 - location)
	:task (supply ?r ?c1 ?u1)
	:precondition (and
		(at ?u1 ?l1)
		(at ?u2 ?l2)
		; (not (= l1 l2))
	)
	:subtasks (and
		(task0 (get_to ?r ?l2))
		(task1 (supply ?r ?c2 ?u2))
	)
)

(:method m_get_to
    :parameters (?r - robot ?origin - location ?dest - location)
    :task (get_to ?r ?dest)
    :subtasks (and
        (task0 (move ?r ?origin ?dest))
    )
)

(:method m_get_to_via
	:parameters (?r - robot ?middle - location ?dest - location)
	:task (get_to ?r ?dest)
	:subtasks (and
		(task0 (get_to ?r ?middle))
		(task1 (move ?r ?middle ?dest))
	)
)

(:method m_i_am_there
	:parameters (?r - robot ?dest - location)
	:task (get_to ?r ?dest)
	:precondition (at ?r ?dest)
	:subtasks ()
)

(:method m_accompany
	:parameters (?r - robot-patient ?p - patient ?origin - location ?dest - location ?u - unit)
	:task (accompany ?p ?u)
	:subtasks (and
		(task0 (get_to ?r ?origin))
		(task1 (take-patient ?r ?p ?origin))
		(task2 (get_to ?r ?dest))
		(task3 (release-patient ?r ?p ?dest ?u))
	)
)

(:action make-unit-satisfied
	:parameters (?u - unit)
	:precondition (and 
		(not (unit-satisfied ?u))
	)
	:effect (and 
		(unit-satisfied ?u)
	)
)

(:action make-ready-for-unit
	:parameters (?c - content ?u - unit)
	:precondition (and 
		(unit-wants ?u ?c)
		(not (ready-for-unit ?c ?u))
	)
	:effect (and 
		(ready-for-unit ?c ?u)
	)
)

(:action not_unit_wants
	:parameters (?u - unit ?c - content)
	:precondition (and 
		(unit-wants ?u ?c)
	)
	:effect (and 
		(not (unit-wants ?u ?c))
	)
)

(:action move
	:parameters (?r - robot ?from - location ?to - location)
	:precondition (and 
		(at ?r ?from)
		(or (connected ?from ?to) (connected ?to ?from))
		; (not (= ?to central_warehouse))		; !!ROBOT-PATIENT CANNOT MOVE TO CENTRAL WAREHOUSE
	)
	:effect (and 
		(at ?r ?to)
		(not (at ?r ?from))
	)
)

(:action fill
	:parameters (?r - robot-box ?b - box ?c - content ?l - location)
	:precondition (and 
		(at ?b ?l)
		(at ?r ?l)
		(at ?c ?l)
		(empty-box ?b)
		(= ?l central_warehouse) ; content can only be filled in the central warehouse
	)
	:effect (and 
		(filled-with ?b ?c)
		(not (empty-box ?b))
	)
)


; Robot-box can pick up a box from a location
(:action pick-up
	:parameters (?r - robot-box ?b - box ?l - location ?cr - carrier ?s1 - capacity_number ?s2 - capacity_number)
	:precondition (and 
		(at ?b ?l)
		(at ?r ?l)

		(rob-carrier ?r ?cr)
		(capacity_predecessor ?s1 ?s2)
		(capacity ?cr ?s2)
	)
	:effect (and 
		(loaded ?cr ?b)
		(not (at ?b ?l))

		(capacity ?cr ?s1)
		(not (capacity ?cr ?s2))
	)
)

(:action drop
		:parameters (?r - robot-box ?b - box ?l - location ?u - unit ?cr - carrier ?s1 - capacity_number ?s2 - capacity_number)
		:precondition (and
			(at ?r ?l)
			(at ?u ?l)

			(rob-carrier ?r ?cr)
			(loaded ?cr ?b)

			(capacity_predecessor ?s1 ?s2)
			(capacity ?cr ?s1)
		)
		:effect (and 
			(unit-has-box ?u ?b)
			(at ?b ?l)

			(not (loaded ?cr ?b))
			(capacity ?cr ?s2)
			(not (capacity ?cr ?s1))
		)
)


; Robot-box can empty a box filled with content causing the unit to have that content
(:action empty
	:parameters (?r - robot-box ?b - box ?c - content ?u - unit ?l - location)
	:precondition (and 
		(at ?u ?l)
		(at ?b ?l)
		(at ?r ?l)
		(unit-has-box ?u ?b)
		(filled-with ?b ?c)
	)
	:effect (and 
		(unit-has-content ?u ?c)
		(not (filled-with ?b ?c))
		(empty-box ?b)
		(at ?c ?l)
	)
)


(:action take-patient
	:parameters (?r - robot-patient ?p - patient ?l - location)
	:precondition (and 
		(at ?r ?l)
		(at ?p ?l)
		(not (busy ?r))
	)
	:effect (and 
		(with-patient ?r ?p)
		(busy ?r)
	)
)

(:action release-patient
	:parameters (?r - robot-patient ?p - patient ?l - location ?u - unit)
	:precondition (and 
		(at ?r ?l)
		(at ?u ?l)
		(with-patient ?r ?p)
		(busy ?r)
	)

	:effect (and 
		(at ?p ?l)
		(at-unit ?p ?u)
		
		(not (with-patient ?r ?p))
		(not (busy ?r))
	)
)
)