(define (domain healthcare)

(:requirements :strips :typing :hierarchy)

(:types
    location - object
	unit    - locatable
	content - locatable
	box     - locatable
	patient - locatable
	robot-box       - robot
	robot-patient   - robot
	robot           - locatable
	carrier         - locatable
	capacity_number - object
)

(:constants 
	central_warehouse - location
	entrance - location
	scalpel tongue_depressor aspirin bandage thermometer - content
)

(:predicates
    (at ?x - locatable ?l - location)		; x is at location
	(at-unit ?p - patient ?u - unit) 		; patient is at unit
    (connected ?l1 - location ?l2 - location) ; locations are connected

	(empty-box ?b - box)               			; box is empty
    (filled-with ?b - box ?c - content) 		; box is filled with content 
    (rob-carrier ?r - robot-box ?cr - carrier)          ; robot has a carrier
    (loaded ?cr - carrier ?b - box)          ; carrier is carrying a box
    (capacity ?cr - carrier ?n - capacity_number)
	(capacity_predecessor ?arg0 - capacity_number ?arg1 - capacity_number)
	(ready-for-unit ?c - content ?u - unit)	;?cr - carrier ;content is ready for delivery to unit

	(unit-has-box ?u - unit ?b - box)           ; unit has a box
    (unit-has-content ?u - unit ?c - content)   ; unit has specific content
	(unit-wants ?u - unit ?c - content)
	(unit-satisfied ?u - unit)

    (with-patient ?r - robot ?p - patient)  ; robot is with a patient
	(busy ?r - robot-patient)              	; robot is busy with a patient

)

(:task deliver_all
    :parameters ()
    :precondition ()
    :effect ()
)

(:task load_all
	:parameters ()
    :precondition ()
    :effect ()
)

(:task supply_all
	:parameters ()
	:precondition ()
	:effect ()
)

(:task get_to
    :parameters (?r - robot ?l - location)    
    :precondition ()
    :effect ()
)

(:task load
	:parameters (?r - robot-box ?c - content)
	:precondition ()
	:effect ()
)

(:task supply
	:parameters (?r - robot-box ?c - content ?u - unit)
	:precondition ()
	:effect ()
)

)

