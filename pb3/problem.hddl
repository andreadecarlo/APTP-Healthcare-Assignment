(define (problem problem3) (:domain healthcare)
    (:objects 
        r1 - robot-box
        rp - robot-patient
    
        b1 b2 b3 - box
        c1 c2 c3 - content

        u1 u2 u3 - unit
        l1 l2 - location

        p1 - patient

        cr1 cr2 - carrier

        capacity_0 - capacity_number
        capacity_1 - capacity_number
        capacity_2 - capacity_number
        ; capacity_3 - capacity_number

    )
    ; scalpel tongue_depressor aspirin bandage thermometer
    (:htn
        :parameters ()
        ; :subtasks (and
        ;     (task1 (load_all r1 cr1))
        ;     (task2 (load_all r2 cr2))
        ; )
        ; :ordering (task1 < task2)
        :subtasks (deliver_all)
    )
    
    (:init
        (at b1 central_warehouse)
        (at b2 central_warehouse)
        (at b3 central_warehouse)

        (empty-box b1)
        (empty-box b2)
        (empty-box b3)

        (at tongue_depressor central_warehouse)
        (at scalpel central_warehouse)
        (at c1 central_warehouse)
        (at c2 central_warehouse)
        (at c3 central_warehouse)

        ; (connected entrance l1)
        (connected l1 l2)
        (connected l2 central_warehouse)

        (at u1 l2)
        (at u2 l2)
        (at u3 l2)

        (capacity_predecessor capacity_0 capacity_1)
        (capacity_predecessor capacity_1 capacity_2)
        ; (capacity_predecessor capacity_2 capacity_3)        

        (at p1 entrance)
        
        (at r1 central_warehouse)
        (rob-carrier r1 cr1)
        (capacity cr1 capacity_2)

        (unit-wants u1 c1)
        ; (unit-wants u1 c2)
        ; (unit-wants u1 c3)
    )

)