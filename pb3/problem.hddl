(define (problem problem3) (:domain healthcare)
    (:objects 
        r1 - robot-box
        r2 - robot-patient

        u1 u2 u3 - unit
        l1 l2 l3 - location

        b1 b2 b3 - box
        p1 p2 - patient

        c1 - carrier

        capacity_0 - capacity_number
        capacity_1 - capacity_number
        capacity_2 - capacity_number
        capacity_3 - capacity_number

    )
    ; scalpel tongue_depressor aspirin bandage thermometer
    (:htn
        :parameters ()
        :subtasks (and
            ; (task0 (load r1 scalpel))
            ; (task1 (load r1 aspirin))
            ; (task2 (load r1 bandage))
            ; (task3 (get_to r1 l3))
            ; (task4 (supply r1 aspirin u1))
            ; (task4 (supply r1 scalpel u1))

            (task0 (deliver scalpel u1))
            (task1 (deliver aspirin u1))
            (task2 (deliver bandage u2))

            (task3 (accompany p1 u1))

        )

        :ordering (and
            (task0 < task1)
            (task1 < task2)
            (task2 < task3)
        )
    )
    (:init
        (at r1 central_warehouse)
        (at c1 central_warehouse)
        (rob-carrier r1 c1)

        (at r2 entrance)

        (at p1 entrance)
        (at p2 entrance)

        (connected central_warehouse l1)
        (connected l1 l2)
        (connected l2 l3)

        (connected entrance l1)

        (at b1 central_warehouse)
        (at b2 central_warehouse)
        (at b3 central_warehouse)

        (at u1 l1)
        (at u2 l2)

        (empty-box b1)
        (empty-box b2)
        (empty-box b3)

        (at scalpel central_warehouse)
        (at aspirin central_warehouse)
        (at bandage central_warehouse)        
        
        (capacity_predecessor capacity_0 capacity_1)
        (capacity_predecessor capacity_1 capacity_2)
        (capacity_predecessor capacity_2 capacity_3)
        (capacity c1 capacity_3)
    )

)